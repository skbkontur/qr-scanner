{"version":3,"file":"qr-scanner.min.js","sources":["src/qr-scanner.js"],"sourcesContent":["export default class QrScanner {\r\n    /* async */\r\n    static hasCamera() {\r\n        // note that enumerateDevices can always be called and does not prompt the user for permission. However, device\r\n        // labels are only readable if served via https and an active media stream exists or permanent permission is\r\n        // given. That doesn't matter for us though as we don't require labels.\r\n        return navigator.mediaDevices.enumerateDevices()\r\n            .then(devices => devices.some(device => device.kind === 'videoinput'))\r\n            .catch(() => false);\r\n    }\r\n\r\n    constructor(video, onDecode, canvasSize = QrScanner.DEFAULT_CANVAS_SIZE) {\r\n        this.$video = video;\r\n        this.$canvas = document.createElement('canvas');\r\n        this._onDecode = onDecode;\r\n        this._active = false;\r\n        this._paused = false;\r\n\r\n        this.$canvas.width = canvasSize;\r\n        this.$canvas.height = canvasSize;\r\n        this._sourceRect = {\r\n            x: 0,\r\n            y: 0,\r\n            width: canvasSize,\r\n            height: canvasSize\r\n        };\r\n\r\n        this._onCanPlay = this._onCanPlay.bind(this);\r\n        this._onPlay = this._onPlay.bind(this);\r\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\r\n\r\n        this.$video.addEventListener('canplay', this._onCanPlay);\r\n        this.$video.addEventListener('play', this._onPlay);\r\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\r\n\r\n        this._qrWorker = new Worker(QrScanner.WORKER_PATH);\r\n    }\r\n\r\n    destroy() {\r\n        this.$video.removeEventListener('canplay', this._onCanPlay);\r\n        this.$video.removeEventListener('play', this._onPlay);\r\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\r\n\r\n        this.stop();\r\n        this._qrWorker.postMessage({\r\n            type: 'close'\r\n        });\r\n    }\r\n\r\n    /* async */\r\n    start() {\r\n        if (this._active && !this._paused) {\r\n            return Promise.resolve();\r\n        }\r\n        if (window.location.protocol !== 'https:') {\r\n            // warn but try starting the camera anyways\r\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\r\n        }\r\n        this._active = true;\r\n        this._paused = false;\r\n        if (document.hidden) {\r\n            // camera will be started as soon as tab is in foreground\r\n            return Promise.resolve();\r\n        }\r\n        clearTimeout(this._offTimeout);\r\n        this._offTimeout = null;\r\n        if (this.$video.srcObject) {\r\n            // camera stream already/still set\r\n            this.$video.play();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        let facingMode = 'environment';\r\n        return this._getCameraStream('environment', true)\r\n            .catch(() => {\r\n                // we (probably) don't have an environment camera\r\n                facingMode = 'user';\r\n                return this._getCameraStream(); // throws if camera is not accessible (e.g. due to not https)\r\n            })\r\n            .then(stream => {\r\n                this.$video.srcObject = stream;\r\n                this._setVideoMirror(facingMode);\r\n            })\r\n            .catch(e => {\r\n                this._active = false;\r\n                throw e;\r\n            });\r\n    }\r\n\r\n    stop() {\r\n        this.pause();\r\n        this._active = false;\r\n    }\r\n\r\n    pause() {\r\n        this._paused = true;\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n        this.$video.pause();\r\n        if (this._offTimeout) {\r\n            return;\r\n        }\r\n        this._offTimeout = setTimeout(() => {\r\n            const track = this.$video.srcObject && this.$video.srcObject.getTracks()[0];\r\n            if (!track) return;\r\n            track.stop();\r\n            this.$video.srcObject = null;\r\n            this._offTimeout = null;\r\n        }, 300);\r\n    }\r\n\r\n    /* async */\r\n    static scanImage(imageOrFileOrUrl, sourceRect=null, worker=null, canvas=null, fixedCanvasSize=false,\r\n                     alsoTryWithoutSourceRect=false) {\r\n        let createdNewWorker = false;\r\n        let promise = new Promise((resolve, reject) => {\r\n            if (!worker) {\r\n                worker = new Worker(QrScanner.WORKER_PATH);\r\n                createdNewWorker = true;\r\n                worker.postMessage({ type: 'inversionMode', data: 'both' }); // scan inverted color qr codes too\r\n            }\r\n            let timeout, onMessage, onError;\r\n            onMessage = event => {\r\n                if (event.data.type !== 'qrResult') {\r\n                    return;\r\n                }\r\n                worker.removeEventListener('message', onMessage);\r\n                worker.removeEventListener('error', onError);\r\n                clearTimeout(timeout);\r\n                if (event.data.data !== null) {\r\n                    resolve(event.data.data);\r\n                } else {\r\n                    reject('QR code not found.');\r\n                }\r\n            };\r\n            onError = (e) => {\r\n                worker.removeEventListener('message', onMessage);\r\n                worker.removeEventListener('error', onError);\r\n                clearTimeout(timeout);\r\n                const errorMessage = !e ? 'Unknown Error' : (e.message || e);\r\n                reject('Scanner error: ' + errorMessage);\r\n            };\r\n            worker.addEventListener('message', onMessage);\r\n            worker.addEventListener('error', onError);\r\n            timeout = setTimeout(() => onError('timeout'), 3000);\r\n            QrScanner._loadImage(imageOrFileOrUrl).then(image => {\r\n                const imageData = QrScanner._getImageData(image, sourceRect, canvas, fixedCanvasSize);\r\n                worker.postMessage({\r\n                    type: 'decode',\r\n                    data: imageData\r\n                }, [imageData.data.buffer]);\r\n            }).catch(onError);\r\n        });\r\n\r\n        if (sourceRect && alsoTryWithoutSourceRect) {\r\n            promise = promise.catch(() => QrScanner.scanImage(imageOrFileOrUrl, null, worker, canvas, fixedCanvasSize));\r\n        }\r\n\r\n        promise = promise.finally(() => {\r\n            if (!createdNewWorker) return;\r\n            worker.postMessage({\r\n                type: 'close'\r\n            });\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    setGrayscaleWeights(red, green, blue, useIntegerApproximation = true) {\r\n        this._qrWorker.postMessage({\r\n            type: 'grayscaleWeights',\r\n            data: { red, green, blue, useIntegerApproximation }\r\n        });\r\n    }\r\n\r\n    setInversionMode(inversionMode) {\r\n        this._qrWorker.postMessage({\r\n            type: 'inversionMode',\r\n            data: inversionMode\r\n        });\r\n    }\r\n\r\n    _onCanPlay() {\r\n        this._updateSourceRect();\r\n        this.$video.play();\r\n    }\r\n\r\n    _onPlay() {\r\n        this._updateSourceRect();\r\n        this._scanFrame();\r\n    }\r\n\r\n    _onVisibilityChange() {\r\n        if (document.hidden) {\r\n            this.pause();\r\n        } else if (this._active) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    _updateSourceRect() {\r\n        const smallestDimension = Math.min(this.$video.videoWidth, this.$video.videoHeight);\r\n        const sourceRectSize = Math.round(2 / 3 * smallestDimension);\r\n        this._sourceRect.width = this._sourceRect.height = sourceRectSize;\r\n        this._sourceRect.x = (this.$video.videoWidth - sourceRectSize) / 2;\r\n        this._sourceRect.y = (this.$video.videoHeight - sourceRectSize) / 2;\r\n    }\r\n\r\n    _scanFrame() {\r\n        if (!this._active || this.$video.paused || this.$video.ended) return false;\r\n        // using requestAnimationFrame to avoid scanning if tab is in background\r\n        requestAnimationFrame(() => {\r\n            QrScanner.scanImage(this.$video, this._sourceRect, this._qrWorker, this.$canvas, true)\r\n                .then(this._onDecode, error => {\r\n                    if (this._active && error !== 'QR code not found.') {\r\n                        console.error(error);\r\n                    }\r\n                })\r\n                .then(() => this._scanFrame());\r\n        });\r\n    }\r\n\r\n    _getCameraStream(facingMode, exact = false) {\r\n        const constraintsToTry = [{\r\n            width: { min: 1024 }\r\n        }, {\r\n            width: { min: 768 }\r\n        }, {}];\r\n\r\n        if (facingMode) {\r\n            if (exact) {\r\n                facingMode = { exact: facingMode };\r\n            }\r\n            constraintsToTry.forEach(constraint => constraint.facingMode = facingMode);\r\n        }\r\n        return this._getMatchingCameraStream(constraintsToTry);\r\n    }\r\n\r\n    _getMatchingCameraStream(constraintsToTry) {\r\n        if (constraintsToTry.length === 0) {\r\n            return Promise.reject('Camera not found.');\r\n        }\r\n        return navigator.mediaDevices.getUserMedia({\r\n            video: constraintsToTry.shift()\r\n        }).catch(() => this._getMatchingCameraStream(constraintsToTry));\r\n    }\r\n\r\n    _setVideoMirror(facingMode) {\r\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\r\n        const scaleFactor = facingMode==='user'? -1 : 1;\r\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\r\n    }\r\n\r\n    static _getImageData(image, sourceRect=null, canvas=null, fixedCanvasSize=false) {\r\n        canvas = canvas || document.createElement('canvas');\r\n        const sourceRectX = sourceRect && sourceRect.x? sourceRect.x : 0;\r\n        const sourceRectY = sourceRect && sourceRect.y? sourceRect.y : 0;\r\n        const sourceRectWidth = sourceRect && sourceRect.width? sourceRect.width : image.width || image.videoWidth;\r\n        const sourceRectHeight = sourceRect && sourceRect.height? sourceRect.height : image.height || image.videoHeight;\r\n        if (!fixedCanvasSize && (canvas.width !== sourceRectWidth || canvas.height !== sourceRectHeight)) {\r\n            canvas.width = sourceRectWidth;\r\n            canvas.height = sourceRectHeight;\r\n        }\r\n        const context = canvas.getContext('2d', { alpha: false });\r\n        context.imageSmoothingEnabled = false; // gives less blurry images\r\n        context.drawImage(image, sourceRectX, sourceRectY, sourceRectWidth, sourceRectHeight, 0, 0, canvas.width, canvas.height);\r\n        return context.getImageData(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    /* async */\r\n    static _loadImage(imageOrFileOrUrl) {\r\n        if (imageOrFileOrUrl instanceof HTMLCanvasElement || imageOrFileOrUrl instanceof HTMLVideoElement\r\n            || window.ImageBitmap && imageOrFileOrUrl instanceof window.ImageBitmap\r\n            || window.OffscreenCanvas && imageOrFileOrUrl instanceof window.OffscreenCanvas) {\r\n            return Promise.resolve(imageOrFileOrUrl);\r\n        } else if (imageOrFileOrUrl instanceof Image) {\r\n            return QrScanner._awaitImageLoad(imageOrFileOrUrl).then(() => imageOrFileOrUrl);\r\n        } else if (imageOrFileOrUrl instanceof File || imageOrFileOrUrl instanceof URL\r\n            ||  typeof(imageOrFileOrUrl)==='string') {\r\n            const image = new Image();\r\n            if (imageOrFileOrUrl instanceof File) {\r\n                image.src = URL.createObjectURL(imageOrFileOrUrl);\r\n            } else {\r\n                image.src = imageOrFileOrUrl;\r\n            }\r\n            return QrScanner._awaitImageLoad(image).then(() => {\r\n                if (imageOrFileOrUrl instanceof File) {\r\n                    URL.revokeObjectURL(image.src);\r\n                }\r\n                return image;\r\n            });\r\n        } else {\r\n            return Promise.reject('Unsupported image type.');\r\n        }\r\n    }\r\n\r\n    /* async */\r\n    static _awaitImageLoad(image) {\r\n        return new Promise((resolve, reject) => {\r\n            if (image.complete && image.naturalWidth!==0) {\r\n                // already loaded\r\n                resolve();\r\n            } else {\r\n                let onLoad, onError;\r\n                onLoad = () => {\r\n                    image.removeEventListener('load', onLoad);\r\n                    image.removeEventListener('error', onError);\r\n                    resolve();\r\n                };\r\n                onError = () => {\r\n                    image.removeEventListener('load', onLoad);\r\n                    image.removeEventListener('error', onError);\r\n                    reject('Image load error');\r\n                };\r\n                image.addEventListener('load', onLoad);\r\n                image.addEventListener('error', onError);\r\n            }\r\n        });\r\n    }\r\n}\r\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\r\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';\r\n"],"names":["constructor","QrScanner","video","onDecode","canvasSize","DEFAULT_CANVAS_SIZE","$video","$canvas","document","createElement","_onDecode","_paused","_active","width","height","_sourceRect","x","y","_onCanPlay","bind","_onPlay","_onVisibilityChange","addEventListener","_qrWorker","Worker","WORKER_PATH","hasCamera","navigator","mediaDevices","enumerateDevices","then","devices","some","device","kind","catch","destroy","removeEventListener","stop","postMessage","type","start","Promise","resolve","window","location","protocol","console","warn","hidden","clearTimeout","_offTimeout","srcObject","play","facingMode","_getCameraStream","stream","_setVideoMirror","e","pause","setTimeout","track","scanImage","imageOrFileOrUrl","sourceRect","worker","canvas","fixedCanvasSize","alsoTryWithoutSourceRect","createdNewWorker","promise","reject","data","onMessage","event","onError","timeout","_loadImage","image","imageData","buffer","finally","setGrayscaleWeights","red","green","blue","useIntegerApproximation","setInversionMode","inversionMode","_updateSourceRect","_scanFrame","videoHeight","sourceRectSize","videoWidth","paused","ended","requestAnimationFrame","error","exact","min","constraintsToTry","forEach","constraint","_getMatchingCameraStream","length","getUserMedia","shift","style","transform","_getImageData","sourceRectWidth","sourceRectHeight","alpha","context","imageSmoothingEnabled","drawImage","sourceRectX","sourceRectY","getImageData","HTMLCanvasElement","HTMLVideoElement","ImageBitmap","OffscreenCanvas","Image","_awaitImageLoad","File","URL","src","createObjectURL","revokeObjectURL","complete","naturalWidth","onLoad"],"mappings":"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"}